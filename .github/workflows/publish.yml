name: Publish Images
on:
  workflow_dispatch:
  push:
    branches:
      - 'main'
    paths:
      - 'package/versions.txt'
      - 'package/Dockerfile'

env:
  IMAGE_REPO: "mallardduck/rancher-kuberlr"

jobs:
  validate-versions:
    name: "Validate versions.txt"
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@44c2b7a8a4ea60a981eaca3cf939b5f4305c123b # v4.1.5
      - run: scripts/check-kuberlr-versions.sh package/versions.txt
  image-prebuild:
    needs:
      - validate-versions
    name: Identify new versions
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.new-versions.outputs.value }}
    steps:
      - name: Check out repository code
        uses: actions/checkout@44c2b7a8a4ea60a981eaca3cf939b5f4305c123b # v4.1.5
      - name: Find existing images
        id: existing-version
        run: |
          VALUES=$(skopeo list-tags docker://${IMAGE_REPO} |jq '.Tags | join(" ")')
          echo "EXISTING_VERSIONS=${VALUES}" >> "$GITHUB_OUTPUT"
      - name: Filter new versions
        id: new-versions
        env:
          EXISTING_VERSIONS: ${{ steps.existing-version.outputs.EXISTING_VERSIONS }}
        run: |
          touch new-versions.txt
          ./scripts/new-kuberlr-versions.sh
          JSON=$(jq -R . new-versions.txt | jq -sc .)
          NEW_COUNT=$(wc -l new-versions.txt |awk '{print $1}')
          echo "value=${JSON}"
          echo "value=${JSON}" >> "$GITHUB_OUTPUT"
          echo "Found ${NEW_COUNT} new kuberlr versions to build" >> $GITHUB_STEP_SUMMARY
  image-build:
    permissions:
      contents: read
      id-token: write # this is important, it's how we authenticate with Vault
    needs:
      - image-prebuild
    name: Build and push Image(s)
    runs-on: ubuntu-latest
    strategy:
      matrix:
        version: ${{fromJSON(needs.image-prebuild.outputs.matrix)}}
    steps:
      - name: Check out repository code
        uses: actions/checkout@44c2b7a8a4ea60a981eaca3cf939b5f4305c123b # v4.1.5
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@d70bba72b1f3fd22344832f00baa16ece964efeb # v3.3.0
      - name: Log in to the Container registry
        uses: docker/login-action@e92390c5fb421da1463c202d546fed0ec5c39f20 # v3.1.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@8e5442c4ef9f78752691e2d8f8d19755c6f78e81 # v5.5.1
        with:
          images: ${{ env.IMAGE_REPO }}
      - name: Build and push
        uses: docker/build-push-action@2cdde995de11925a030ce8070c3d77a52ffcf1c0 # v5.3.0
        id: build-push
        with:
          context: .
          file: package/Dockerfile
          platforms: "linux/amd64,linux/arm64,linux/s390x"
          push: true
          tags: ${{ env.IMAGE_REPO }}:${{ matrix.version }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            KUBERLR_RELEASE=${{ matrix.version }}
      - name: Get CPU Arch hashes
        run: |
          docker manifest inspect ${{ env.IMAGE_REPO }}:${{ matrix.version }} | jq --raw-output '.manifests[]
            | select(.platform.architecture | IN("amd64", "arm64", "s390x"))
            | "IMAGE_\(.platform.architecture | ascii_upcase)=\(.digest)"' >> "$GITHUB_ENV"
      - name: Tag CPU Arch Images
        run: |
          echo "Re-tagging amd64 images"
          docker image pull ${{ env.IMAGE_REPO }}@${{ env.IMAGE_AMD64 }}
          docker tag ${{ env.IMAGE_REPO }}@${{ env.IMAGE_AMD64 }} ${{ env.IMAGE_REPO }}:${{ matrix.version }}-amd64
          docker push ${{ env.IMAGE_REPO }}:${{ matrix.version }}-amd64
          echo "Re-tagging arm64 images"
          docker image pull ${{ env.IMAGE_REPO }}@${{ env.IMAGE_ARM64 }}
          docker tag ${{ env.IMAGE_REPO }}@${{ env.IMAGE_ARM64 }} ${{ env.IMAGE_REPO }}:${{ matrix.version }}-arm64
          docker push ${{ env.IMAGE_REPO }}:${{ matrix.version }}-arm64
          echo "Re-tagging s390x images"
          docker image pull ${{ env.IMAGE_REPO }}@${{ env.IMAGE_S390X }}
          docker tag ${{ env.IMAGE_REPO }}@${{ env.IMAGE_S390X }} ${{ env.IMAGE_REPO }}:${{ matrix.version }}-s390x
          docker push ${{ env.IMAGE_REPO }}:${{ matrix.version }}-s390x